using Microsoft.EntityFrameworkCore;
using RealEstateAnalysis.Data.Abstract.LocationAnalysis;
using RealEstateAnalysis.Data.Entities.LocationAnalysis;
using RealEstateAnalysis.Domain;

namespace RealEstateAnalysis.Data.Repositories.LocationAnalysis
{
    public class CityRepository : ICityRepository
    {
        private readonly EFDbContext dbContext;

        public CityRepository(EFDbContext dbContext) => this.dbContext = dbContext;

        public async Task DeleteAsync(City city)
        {
            dbContext.LocationAnalysis_Cities.Remove(city);
            await dbContext.SaveChangesAsync();
        }

        public async Task<List<City>> GetAllAsync(string userId, bool asNoTracking = false) =>
            await GetBaseQuery(asNoTracking).Where(x => x.UserId == userId).ToListAsync();

        public async Task<City> GetByIdAsync(long id, string userId, bool asNoTracking = false) =>
            await GetBaseQuery(asNoTracking).FirstOrDefaultAsync(x => x.Id == id && x.UserId == userId);

        public async Task RemoveAllAutoGenerated()
        {
            var citiesToRemove = await dbContext.LocationAnalysis_Cities.Where(x => x.AutoGeneratedDate != null).ToListAsync();
            dbContext.RemoveRange(citiesToRemove);

            await dbContext.SaveChangesAsync();
        }

        public async Task SaveOrUpdateAsync(City city)
        {
            if (city.Id == default)
            {
                dbContext.Add(city);
            }

            await dbContext.SaveChangesAsync();
        }

        public async Task SaveOrUpdateAsync(List<City> cities)
        {
            foreach (var city in cities)
            {
                if (city.Id == default)
                {
                    dbContext.Add(city);
                }
            }

            await dbContext.SaveChangesAsync();
        }

        private IQueryable<City> GetBaseQuery(bool asNoTracking = false)
        {
            var query = dbContext.LocationAnalysis_Cities
                .Include(x => x.State).AsQueryable();

            if (asNoTracking)
            {
                query.AsNoTracking();
            }

            return query;
        }
    }
}