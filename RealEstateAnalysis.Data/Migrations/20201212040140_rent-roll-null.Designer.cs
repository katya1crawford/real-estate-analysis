// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateAnalysis.Domain;

namespace RealEstateAnalysis.Data.Migrations
{
    [DbContext(typeof(EFDbContext))]
    [Migration("20201212040140_rent-roll-null")]
    partial class rentrollnull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.ErrorLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorsLog");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.LocationAnalysis.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CrimeIndexInYearEnd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CrimeIndexInYearStart")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CrimeIndexYearEnd")
                        .HasColumnType("int");

                    b.Property<int>("CrimeIndexYearStart")
                        .HasColumnType("int");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<decimal>("MedianHouseOrCondoValueInYearEnd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MedianHouseOrCondoValueInYearStart")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MedianHouseOrCondoValueYearEnd")
                        .HasColumnType("int");

                    b.Property<decimal>("MedianHouseholdIncomeInYearEnd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MedianHouseholdIncomeInYearStart")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MedianHouseholdIncomeYearEnd")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfJobsAdded")
                        .HasColumnType("int");

                    b.Property<int>("PopulationInYearEnd")
                        .HasColumnType("int");

                    b.Property<int>("PopulationInYearStart")
                        .HasColumnType("int");

                    b.Property<int>("PopulationYearEnd")
                        .HasColumnType("int");

                    b.Property<decimal>("RecentYearJobsGrowthRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Cities", "LocationAnalysis");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.LocationAnalysis.CityDataCityUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("CityDataCityUrl", "LocationAnalysis");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.LocationAnalysis.Neighborhood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("CityUnemploymentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EthnicMixLargestSlicePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HomesMedianDaysOnMarket")
                        .HasColumnType("int");

                    b.Property<decimal>("MedianContractRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MedianHouseholdIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("NeighborhoodUnemploymentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PovertyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Neighborhoods", "LocationAnalysis");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.ClosingCostType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClosingCostTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.ExteriorRepairExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ExteriorRepairExpenseTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.GeneralRepairExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GeneralRepairExpenseTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.InteriorRepairExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InteriorRepairExpenseTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.OperatingExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperatingExpenseTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.PropertyStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyStatuses", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.PropertyType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Lookups.State", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States", "Lookup");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.MonetaryTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MonetaryTransactions");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.AnnualOperatingExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OperatingExpenseTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperatingExpenseTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("AnnualOperatingExpenses", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.ClosingCost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ClosingCostTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClosingCostTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ClosingCosts", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.ExteriorRepairExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExteriorRepairItemTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExteriorRepairItemTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ExteriorRepairExpenses", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Files", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.FileContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("FilesContent", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.GalleryImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("GalleryImages", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.GeneralRepairExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralRepairExpenseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralRepairExpenseTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("GeneralRepairExpenses", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.InteriorRepairExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InteriorRepairExpenseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InteriorRepairExpenseTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("InteriorRepairExpenses", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("AnnualGrossScheduledRentalIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AnnualGrossScheduledRentalIncomeGrowthRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AnnualOperatingExpensesGrowthRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AnnualPropertyManagementFeeRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AnnualVacancyRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("BuildingSquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("County")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DownPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<decimal>("LoanApr")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("LoanYears")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("LotSquareFootage")
                        .HasColumnType("int");

                    b.Property<decimal>("MarketCapitalizationRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OtherAnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PropertyStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ThumbnailImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailImageContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearBuiltIn")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.RentRollItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double>("Bathrooms")
                        .HasColumnType("float");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("ContractRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRenovated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVacant")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MarketRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("RentRollItems", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.UnitGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double>("Bathrooms")
                        .HasColumnType("float");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SquareFootage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("UnitGroups", "RentalProperty");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Reonomy.SoldProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BuildingSquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("County")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fips")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("InvalidAddress")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("LotSquareFootage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MortgageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MortgageLenderName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("MortgageRecordingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SalesDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SourceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StdLandUseCodeDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TotalUnits")
                        .HasColumnType("int");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("SoldProperties", "Reonomy");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.LocationAnalysis.City", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.LocationAnalysis.Neighborhood", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.MonetaryTransaction", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.AnnualOperatingExpense", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.OperatingExpenseType", "OperatingExpenseType")
                        .WithMany()
                        .HasForeignKey("OperatingExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("AnnualOperatingExpenses")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperatingExpenseType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.ClosingCost", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.ClosingCostType", "ClosingCostType")
                        .WithMany()
                        .HasForeignKey("ClosingCostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("ClosingCosts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosingCostType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.ExteriorRepairExpense", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.ExteriorRepairExpenseType", "ExteriorRepairExpenseType")
                        .WithMany()
                        .HasForeignKey("ExteriorRepairItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("ExteriorRepairExpenses")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExteriorRepairExpenseType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.File", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("Files")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.FileContent", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.File", "File")
                        .WithOne("FileContent")
                        .HasForeignKey("RealEstateAnalysis.Data.Entities.RentalProperty.FileContent", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.GalleryImage", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.GeneralRepairExpense", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.GeneralRepairExpenseType", "GeneralRepairExpenseType")
                        .WithMany()
                        .HasForeignKey("GeneralRepairExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("GeneralRepairExpenses")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralRepairExpenseType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.InteriorRepairExpense", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.InteriorRepairExpenseType", "InteriorRepairExpenseType")
                        .WithMany()
                        .HasForeignKey("InteriorRepairExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("InteriorRepairExpenses")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteriorRepairExpenseType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.Property", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.PropertyStatus", "PropertyStatus")
                        .WithMany()
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyStatus");

                    b.Navigation("PropertyType");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.RentRollItem", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", null)
                        .WithMany("RentRollItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.UnitGroup", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.RentalProperty.Property", "Property")
                        .WithMany("UnitGroups")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.Reonomy.SoldProperty", b =>
                {
                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateAnalysis.Data.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.File", b =>
                {
                    b.Navigation("FileContent");
                });

            modelBuilder.Entity("RealEstateAnalysis.Data.Entities.RentalProperty.Property", b =>
                {
                    b.Navigation("AnnualOperatingExpenses");

                    b.Navigation("ClosingCosts");

                    b.Navigation("ExteriorRepairExpenses");

                    b.Navigation("Files");

                    b.Navigation("GeneralRepairExpenses");

                    b.Navigation("InteriorRepairExpenses");

                    b.Navigation("RentRollItems");

                    b.Navigation("UnitGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
