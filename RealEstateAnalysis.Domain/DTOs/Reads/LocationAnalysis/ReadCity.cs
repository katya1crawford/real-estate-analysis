using RealEstateAnalysis.Data.Entities.LocationAnalysis;
using System;

namespace RealEstateAnalysis.Domain.DTOs.Reads.LocationAnalysis
{
    public class ReadCity
    {
        public ReadCity(City city,
            decimal populationGrowthRate,
            bool populationGrowthRateIsGood,
            decimal medianHouseholdIncomeGrowthRate,
            bool medianHouseholdIncomeGrowthRateIsGood,
            decimal medianHouseOrCondoValueGrowthRate,
            bool medianHouseOrCondoValueGrowthRateIsGood,
            decimal crimeReduction,
            bool crimeIndexInYearEndIsGood,
            bool recentYearJobsGrowthRateIsGood,
            decimal minimumAcceptablePopulationGrowthRate,
            decimal minimumAcceptableMedianHouseholdIncomeGrowthRate,
            decimal minimumAcceptableMedianHouseOrCondoValueGrowthRate,
            decimal highestAcceptableCrimeIndex,
            decimal minimumAcceptableRecentYearJobsGrowthRate)
        {
            Id = city.Id;
            CityName = city.CityName;
            PopulationInYearStart = city.PopulationInYearStart;
            PopulationInYearEnd = city.PopulationInYearEnd;
            MedianHouseholdIncomeInYearStart = city.MedianHouseholdIncomeInYearStart;
            MedianHouseholdIncomeInYearEnd = city.MedianHouseholdIncomeInYearEnd;
            MedianHouseOrCondoValueInYearStart = city.MedianHouseOrCondoValueInYearStart;
            MedianHouseOrCondoValueInYearEnd = city.MedianHouseOrCondoValueInYearEnd;
            CrimeIndexInYearStart = city.CrimeIndexInYearStart;
            CrimeIndexInYearEnd = city.CrimeIndexInYearEnd;
            RecentYearJobsGrowthRate = city.RecentYearJobsGrowthRate;
            State = new ReadState(city.State);
            PopulationGrowthRate = Math.Round(populationGrowthRate, 2);
            PopulationGrowthRateIsGood = populationGrowthRateIsGood;
            MedianHouseholdIncomeGrowthRate = Math.Round(medianHouseholdIncomeGrowthRate, 2);
            MedianHouseholdIncomeGrowthRateIsGood = medianHouseholdIncomeGrowthRateIsGood;
            MedianHouseOrCondoValueGrowthRate = Math.Round(medianHouseOrCondoValueGrowthRate, 2);
            MedianHouseOrCondoValueGrowthRateIsGood = medianHouseOrCondoValueGrowthRateIsGood;
            CrimeReduction = crimeReduction;
            CrimeIndexInYearEndIsGood = crimeIndexInYearEndIsGood;
            RecentYearJobsGrowthRateIsGood = recentYearJobsGrowthRateIsGood;
            MinimumAcceptablePopulationGrowthRate = minimumAcceptablePopulationGrowthRate;
            MinimumAcceptableMedianHouseholdIncomeGrowthRate = minimumAcceptableMedianHouseholdIncomeGrowthRate;
            MinimumAcceptableMedianHouseOrCondoValueGrowthRate = minimumAcceptableMedianHouseOrCondoValueGrowthRate;
            HighestAcceptableCrimeIndex = highestAcceptableCrimeIndex;
            MinimumAcceptableRecentYearJobsGrowthRate = minimumAcceptableRecentYearJobsGrowthRate;
            PopulationYearEnd = city.PopulationYearEnd;
            MedianHouseholdIncomeYearEnd = city.MedianHouseholdIncomeYearEnd;
            MedianHouseOrCondoValueYearEnd = city.MedianHouseOrCondoValueYearEnd;
            NumberOfJobsAdded = city.NumberOfJobsAdded;
            CrimeIndexYearStart = city.CrimeIndexYearStart;
            CrimeIndexYearEnd = city.CrimeIndexYearEnd;
            AutoGeneratedDate = city.AutoGeneratedDate;
            IsFavorite = city.IsFavorite;
            MedianHouseholdIncomeYearStart = city.MedianHouseholdIncomeYearStart;
            MedianHouseOrCondoValueYearStart = city.MedianHouseOrCondoValueYearStart;
            PopulationYearStart = city.PopulationYearStart;
        }

        public int PopulationYearEnd { get; }

        public int MedianHouseholdIncomeYearEnd { get; }

        public int MedianHouseOrCondoValueYearEnd { get; }

        public decimal MinimumAcceptablePopulationGrowthRate { get; }

        public decimal MinimumAcceptableMedianHouseholdIncomeGrowthRate { get; }

        public decimal MinimumAcceptableMedianHouseOrCondoValueGrowthRate { get; }

        public decimal HighestAcceptableCrimeIndex { get; }

        public decimal MinimumAcceptableRecentYearJobsGrowthRate { get; }

        public string CityName { get; }

        public decimal CrimeIndexInYearEnd { get; }

        public bool CrimeIndexInYearEndIsGood { get; }

        public decimal CrimeIndexInYearStart { get; }

        public decimal CrimeReduction { get; }

        public long Id { get; }

        public decimal MedianHouseholdIncomeGrowthRate { get; }

        public bool MedianHouseholdIncomeGrowthRateIsGood { get; }

        public decimal MedianHouseholdIncomeInYearEnd { get; }

        public decimal MedianHouseholdIncomeInYearStart { get; }

        public decimal MedianHouseOrCondoValueGrowthRate { get; }

        public bool MedianHouseOrCondoValueGrowthRateIsGood { get; }

        public decimal MedianHouseOrCondoValueInYearEnd { get; }

        public decimal MedianHouseOrCondoValueInYearStart { get; }

        public decimal PopulationGrowthRate { get; }

        public bool PopulationGrowthRateIsGood { get; }

        public int PopulationInYearEnd { get; }

        public int PopulationInYearStart { get; }

        public decimal RecentYearJobsGrowthRate { get; }

        public bool RecentYearJobsGrowthRateIsGood { get; }

        public int NumberOfJobsAdded { get; }

        public int CrimeIndexYearStart { get; }

        public int CrimeIndexYearEnd { get; }

        public DateTime? AutoGeneratedDate { get; }

        public bool IsFavorite { get; }

        public int MedianHouseholdIncomeYearStart { get; }

        public int MedianHouseOrCondoValueYearStart { get; }

        public int PopulationYearStart { get; }

        public ReadState State { get; }
    }
}